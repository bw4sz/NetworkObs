{
    "contents" : "---\ntitle: \"Simulated Data for Two Detection Methods for Observing Species Interactions\"\nauthor: \"Ben Weinstein\"\ndate: \"December 25, 2015\"\noutput: \n  html_document:\n    toc: True\n    keep_md: True\n    theme: spacelab\n---\n\n#Summary\n\n\n```{r,echo=F,message=FALSE,warning=F}\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(gridExtra)\nrequire(knitr)\nlibrary(R2jags)\nrequire(reshape2)\nrequire(ggplot2)\nlibrary(scales)\nlibrary(dplyr)\nlibrary(boot)\nopts_chunk$set(cache=F,fig.height = 5,fig.width = 7,warning=F,messages=F,echo=F)\n\nsource(\"Bayesian/BayesFunctions.R\")\n```\n\n\n```{r}\nload(\"Simulation_2M.RData\")\n```\n\nThere is some underlying network of interactions between hummingbird species  i and plant species j. We observe these interactions using transects across elevation ranges and cameras at individual flowers. To combine these data to jointly estimate the importance of trait-matching and resources on interaction intensity we need a hierarchical occupancy model that accounts for 1) the difference in sampling effort between survey types, 2) The variable number of replicates per species, 3) The difference in detectability of interactions based on survey type. The occupancy model below uses months as our estimated latent state. There are two surveys per month, and a variable number of cameras for each flower, often with no cameras on a given flower in a month.\n\n# True Simulated values\n\nHummingbird Species =10\n\nPlant Species=20\n\nSurvey Periods = 24\n\nDetection Probability for Camera = 0.25\n\nDetection Probability for Transect = 0.6\n\n\nGroup Intercept\n\n* intercept<-2.5\n\n* sigma_intercept<- 0.1\n\nEffect of Trait-matching\n\n* gamma1=-1\n\n* sigma_slope1<- 0.1\n\nEffect of Resources\n\n* gamma2=0\n\n* sigma_slope2<- 0.1\n\nInteraction effect of resources * traitmatch\n\n* gamma3=0.3\n\n* sigma_slope3<- 0.1\n\nBill sizes\nBill<-rpois(h_species,10)\n\nCorolla sizes\n\nCorolla<-rpois(plant_species,15)\n\n\nSurvey periods are 70% cameras, 30% Transect\nTransects have two replicates.Cameras have variable number of replicates, modeled as rpois(lambda=0.5).\n\nResources are scored as either 'High' or 'Low' and is modeled as rbinom(n=1,size=1,prob=0.5)\n\n```{r,eval=F}\nplant_species=20\nTimes=24\ndetection_cam=0.25\ndetection_trans=0.6\n\n#which records are camera, which are transects?\nmt<-rbinom(Times,1,0.7)\nmt[which(mt==1)]<-\"Camera\"\nmt[!mt==\"Camera\"]<-\"Transect\"\n\n#Bill sizes\nBill<-rpois(h_species,10)\n\n#Corolla sizes\nCorolla<-rpois(plant_species,15)\n\n#Subtract both and take absolute value\ntraitmatch<-abs(sapply(Corolla,function(x) x - Bill)/10)\n\n#fill out for each month\ntraitarray<-array(NA,dim=c(h_species,plant_species,Times))\n#fill for each month\nfor (x in 1:Times){\n  traitarray[,,x]<-traitmatch \n}\n\n#simulate some poisson distributed resource counts for each replicate\n#this will be same for each species to start with.\nresources<-array(NA,dim=c(h_species,plant_species,Times))\n\n#fill for each month\nfor (x in 1:Times){\n  resources[,,x]<-rbinom(1,1,0.5)  \n}\n\n#standardize predictors\nresources<-array(data=scale(resources),dim=c(h_species,plant_species,Times))\n\n#regression slope for trait-matching and resources\n#trait match\ngamma1=-1\nintercept<-2.5\nsigma_slope1<- 0.1\nsigma_intercept<- 0.1\n\n#resources\ngamma2=0\nsigma_slope2<- 0.1\n\n#resources * traitmatch\ngamma3=0.3\nsigma_slope3<- 0.1\n\n#loop through each species and plants\n\n#draw values from hierarcichal distributions\nbeta1<-rnorm(h_species,gamma1,sigma_slope1)\nbeta2<-rnorm(h_species,gamma2,sigma_slope2)\nbeta3<-rnorm(h_species,gamma3,sigma_slope3)\n\nalpha<-rnorm(h_species,intercept,sigma_intercept)\n\nphi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)\n\n#How many cameras for each flower during each time period?\ntrue_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))\n\n#combine and melt into a single datafFrame\nmdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)\n\ncolnames(mdat)<-c(\"Bird\",\"Plant\",\"Time\",\"resources\",\"traitmatch\",\"True_state\")\n\n#Merge the survey type\nmdat<-merge(mdat,data.frame(Time=1:Times,Survey_Type=mt))\n\n##Observation models\ndat<-list()\n  \nfor (x in 1:nrow(mdat)){\n  if(mdat$Survey_Type[x]==\"Transect\"){\n    df<-data.frame(Y_Transect=rbinom(2,mdat$True_state[x],prob=detection_trans))\n    dat[[x]]<-cbind(mdat[x,],df)\n  } else{\n        cams<-rpois(1,0.4)\n        if(cams==0){next}\n        df<-data.frame(Y_Camera=rbinom(cams,mdat$True_state[x],prob=detection_cam))\n        dat[[x]]<-cbind(mdat[x,],df)\n  }\n}\n\nmdat<-rbind_all(dat)\n```\n\n# Observed Data\n\n```{r}\nmdatm<-melt(mdat,measure.vars = c(\"True_state\",\"Y_Camera\",\"Y_Transect\"))\n\nggplot(mdatm,aes(x=traitmatch,y=value,col=variable)) + geom_point(alpha=.5) + geom_smooth(method=\"glm\",family=\"poisson\",linetype=\"dashed\",size=1.1) + ggtitle(\"Correlation in Simulated Data\") + labs(x=\"Difference in Bill and Corolla Length\",y=\"Number of Interactions\",col=\"Observation Process\") + theme_bw()\n\n#traitmatch dataframe\nTraitmatch<-mdat %>% group_by(Bird,Plant) %>% summarize(v=unique(traitmatch)) %>% acast(Bird~Plant,value.var=\"v\")\n\nTimeResources<-mdat %>% group_by(Time,Bird) %>% summarize(v=unique(resources)) %>% acast(Bird~Time,value.var=\"v\")\n```\n\n#Hierarchical Occupancy Model\n\nFor hummingbird species i feeding on plant species j observed at time k and sampling event d. \n\n$$ YTransect_{i,j,k,d} \\sim Binomial(S_{i,j,k},\\omega_{Transect}) $$\n$$ YCamera_{i,j,k,d} \\sim Binomial(S_{i,j,k},\\omega_{Camera}) $$\n$$ \\omega_{Camera} <- \\phi_{Camera} * EffortCamera_k $$\n$$ \\omega_{Transect} <- \\phi_{Transect}* EffortTransect_k $$\n$$ S_{i,j,k} \\sim Binomial(\\rho_{i,j,k}) $$\n$$ logit(\\rho_{i,j,k}) = \\alpha_i + \\beta_{1,i} * Traitmatch_{i,j} + \\beta_{2,i} *Resources_{j,k} $$\n\n\n**Priors**\n\n$$ \\phi_{Camera} \\sim Uniform(0,1) $$\n$$ \\phi_{Transect} \\sim Uniform(0,1) $$\n$$\\alpha_i \\sim Normal(\\mu_\\alpha,\\tau_{\\alpha})$$\n$$\\beta_{1,i} \\sim Normal(\\mu_{\\beta_1},\\tau_{\\beta_1})$$\n$$\\beta_{2,i} \\sim Normal(\\mu_{\\beta_2},\\tau_{\\beta_2})$$\n\n**Hyperpriors**\n\nGroup Level Means\n\n$$\\mu_{\\beta_1} \\sim Normal(0,0.0001)$$\n$$\\mu_{\\beta_2} \\sim Normal(0,0.0001)$$\n$$ \\mu_{\\alpha} \\sim Normal(0,0.0001)$$\n\nGroup Level Variance\n\n$$\\tau_{\\alpha} \\sim Gamma(0.0001,0.0001)$$\n$$\\tau_{\\beta_1} \\sim Gamma(0.0001,0.0001)$$\n$$\\tau_{\\beta_2} \\sim Gamma(0.0001,0.0001)$$\n\n**Derived quantities**\n\n$$\\sigma_{\\alpha} = \\sqrt[2]{\\frac{1}{\\tau_\\alpha}}$$\n$$\\sigma_{\\beta_1} = \\sqrt[2]{\\frac{1}{\\tau_{\\beta_1}}}$$\n$$\\sigma_{\\beta_2} = \\sqrt[2]{\\frac{1}{\\tau_{\\beta_2}}}$$\n$$\\sigma_{\\beta_3} = \\sqrt[2]{\\frac{1}{\\tau_{\\beta_3}}}$$\n\n# Analysis of observed data\n\n```{r,eval=F,strip.white=T}\nparalleljags<-T\n\nif(paralleljags){\n    \n#Source model\nsource(\"Bayesian/NmixturePoissonRagged2m.R\")\n\n#print model\nwriteLines(readLines(\"Bayesian/NmixturePoissonRagged2m.R\"))\n\n#Input Data\nDat <- c('Yobs_camera','Yobs_transect','Birds','Bird','Plant','Time','Plants','Times','resources','Nobs','cam_surveys','trans_surveys','Traitmatch')\n\n#Inits\nInitStage <- function(){\n  #A blank Y matrix - all present\n  initY<-array(dim=c(Birds,Plants,Times),data=max(Yobs_transect,na.rm=T))\n  initB<-as.numeric(matrix(nrow=Birds,ncol=1,data=.1))\n\nlist(beta1=initB,beta2=initB,beta3=initB,alpha=rep(.5,Birds),intercept=0,tau_alpha=0.1,tau_beta1=0.1,tau_beta2=0.1,tau_beta3=0.1,gamma1=0,gamma2=0,gamma3=0,dtrans=0.5,dcam=0.5,N=initY)}\n\n#Parameters to track\nParsStage <- c(\"alpha\",\"beta1\",\"beta2\",\"beta3\",\"intercept\",\"sigma_int\",\"sigma_slope1\",\"sigma_slope2\",\"sigma_slope3\",\"gamma1\",\"gamma2\",\"gamma3\",\"dtrans\",\"dcam\")\n\n#MCMC options\n\nni <- 25000  # number of draws from the posterior\nnt <- max(c(1,ni*.0001))  #thinning rate\nnb <- ni*.85 # number to discard for burn-in\nnc <- 2  # number of chains\n\n#Jags\n\n  Yobs_camera = mdat$Y_Camera\n  Yobs_transect = mdat$Y_Transect\n  Birds=max(mdat$Bird)\n  Bird=mdat$Bird\n  Plant=mdat$Plant\n  Time=mdat$Time\n  Plants=max(mdat$Plant)\n  Times=max(mdat$Time)\n  resources=TimeResources\n  Nobs=nrow(mdat)\n  cam_surveys=(mdat$Survey_Type==\"Camera\")*1\n  trans_surveys=(mdat$Survey_Type==\"Transect\")*1\n  Traitmatch=Traitmatch\n\n  m<-do.call(jags.parallel,list(Dat,InitStage,ParsStage,model.file=\"Bayesian/NmixturePoissonRagged2m.jags\",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))\n  \n} else {\n  \n#Source model\nsource(\"Bayesian/NmixturePoissonRagged2m.R\")\n\n#print model\nwriteLines(readLines(\"Bayesian/NmixturePoissonRagged2m.R\"))\n\n#Input Data\nDat <- list(\n  Yobs_camera = mdat$Y_Camera,\n  Yobs_transect = mdat$Y_Transect,\n  Birds=max(mdat$Bird),\n  Bird=mdat$Bird,\n  Plant=mdat$Plant,\n  Time=mdat$Time,\n  Plants=max(mdat$Plant),\n  Times=max(mdat$Time),\n  resources=TimeResources,\n  Nobs=nrow(mdat),\n  cam_surveys=(mdat$Y_Camera>0)*1,\n  trans_surveys=(mdat$Y_Transect>0)*1,\n  Traitmatch=Traitmatch)\n\n#A blank Y matrix - all present\ninitY<-array(dim=c(Dat$Birds,Dat$Plants,Dat$Times),data=max(mdat$Y_Transect,na.rm=T))\ninitB<-as.numeric(matrix(nrow=h_species,ncol=1,data=.1))\n\n#Inits\nInitStage <- function(){list(beta1=initB,beta2=initB,beta3=initB,alpha=rep(.5,Dat$Birds),intercept=0,tau_alpha=0.1,tau_beta1=0.1,tau_beta2=0.1,tau_beta3=0.1,gamma1=0,gamma2=0,gamma3=0,dtrans=0.5,dcam=0.5,N=initY)}\n\n#Parameters to track\nParsStage <- c(\"alpha\",\"beta1\",\"beta2\",\"intercept\",\"sigma_int\",\"sigma_slope1\",\"sigma_slope2\",\"gamma1\",\"gamma2\",\"dtrans\",\"dcam\")\n\n#MCMC options\n\nni <- 30000  # number of draws from the posterior\nnt <- max(c(1,ni*.0001))  #thinning rate\nnb <- ni*.90 # number to discard for burn-in\nnc <- 2  # number of chains\n\n#Jags\n\nm = jags(inits=InitStage,\n         n.chains=nc,\n         model.file=\"Bayesian/NmixturePoissonRagged2m.jags\",\n         working.directory=getwd(),\n         data=Dat,\n         parameters.to.save=ParsStage,\n         n.thin=nt,\n         n.iter=ni,\n         n.burnin=nb,\n         DIC=T)\n}\n```\n\n```{r}\npars<-extract_par(m)\n```\n\n###Assess Convergence\n\n```{r,cache=FALSE,eval=TRUE,fig.width=11,fig.height=5}\n###Chains\nggplot(pars[pars$par %in% c(\"alpha\",\"beta1\",\"beta2\",\"beta3\"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + facet_grid(par~species,scale=\"free\") + theme_bw() + labs(col=\"Chain\") + ggtitle(\"Species Level Probability\")\n```\n\n```{r}\nggplot(pars[pars$par %in% c(\"dcam\",\"dtrans\"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + facet_grid(~par,scale=\"free\") + theme_bw() + labs(col=\"Chain\") + ggtitle(\"Detection Probability\")\n```\n\n```{r,fig.height=5,fig.width=11,eval=T}\nggplot(pars[pars$par %in% c(\"gamma1\",\"gamma2\",\"gamma3\",\"sigma_int\",\"sigma_slope1\",\"sigma_slope2\",\"sigma_slope3\"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + theme_bw() + labs(col=\"Chain\") + ggtitle(\"Group Level Regression\") + facet_wrap(~par,scales=\"free\")\n```\n\n###Posteriors\n\n```{r,cache=FALSE,fig.width=7,fig.height=13}\n###Posterior Distributions\np<-ggplot(pars[pars$par %in% c(\"alpha\",\"beta1\",\"beta2\",\"beta3\"),],aes(x=estimate)) + geom_histogram() + ggtitle(\"Estimate of parameters\") + facet_grid(species~par,scales=\"free\") + theme_bw() + ggtitle(\"Species Posteriors\")\n\n#Add true values\ntr<-melt(data.frame(species=1:h_species,alpha=alpha,beta1=beta1,beta2=beta2,beta3=beta3),id.var='species')\ncolnames(tr)<-c(\"species\",\"par\",\"value\")\npsim<-p + geom_vline(data=tr,aes(xintercept=value),col='red',linetype='dashed',size=1)\n#ggsave(\"Figures/SimulationPosteriors.jpg\",dpi=300,height=8,width=8)\n```\n\n```{r,cache=FALSE,eval=TRUE,fig.height=13,fig.width=10}\np<-ggplot(pars[pars$par %in% c(\"gamma1\",\"gamma2\",\"gamma3\",\"intercept\",\"sigma_int\",\"sigma_slope1\",\"sigma_slope2\",\"sigma_slope3\",\"dcam\",\"dtrans\"),],aes(x=estimate)) + geom_histogram() + ggtitle(\"Hierarchical Posteriors\") + facet_wrap(~par,scale=\"free\",nrow=2) + theme_bw() \n\n#Add true values\ntr<-melt(list(gamma1=gamma1,gamma2=gamma2,gamma3=gamma3,intercept=intercept,sigma_int=sigma_intercept,sigma_slope1=sigma_slope1,sigma_slope2=sigma_slope2,sigma_slope3=sigma_slope3,dtrans=detection_trans,dcam=detection_cam))\n\ncolnames(tr)<-c(\"value\",\"par\")\n\npsim2<-p + geom_vline(data=tr,aes(xintercept=value),linetype='dashed',size=1,col=\"red\")\n#ggsave(\"Figures/SimulationH.jpg\",dpi=300,height=4,width=10)\n```\n\n```{r,echo=F,fig.height=13,fig.width=12}\nsuppressMessages(grid.arrange(psim,psim2,heights=c(.65,.45)))\n```\n\n###Predicted Relationship \n\n```{r,fig.height=4,fig.width=4}\ncastdf<-dcast(pars[pars$par %in% c(\"gamma1\",\"gamma2\",\"gamma3\",\"intercept\"),], Chain + Draw~par,value.var=\"estimate\")\n\ntrajF<-function(alpha,beta1,beta2,beta3,x,resources){\n  indat<-data.frame(alpha,beta1,beta2,beta3)\n  \n  #fit regression for each input estimate\n  sampletraj<-list()\n  \n  for (y in 1:nrow(indat)){\n    v=exp(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)\n    \n    sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))\n  }\n  \n  sample_all<-rbind_all(sampletraj)\n  \n  #Compute CI intervals\n  predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))\n}\n\n#calculate interactions\n\nintF<-function(alpha,beta1,beta2,beta3,x,resources){\n  indat<-data.frame(alpha,beta1,beta2,beta3)\n  \n  #fit regression for each input estimate\n  sampletraj<-list()\n  \n  for (y in 1:nrow(indat)){\n    v=indat$beta2[y] + indat$beta3[y]  * x\n    sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))\n  }\n  \n  sample_all<-rbind_all(sampletraj)\n  \n  #Compute CI intervals\n  predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))\n}\n```\n\n#Predicted Relationship\n\n```{r}\npredy<-trajF(alpha=castdf$intercept,beta1=castdf$gamma1,x=as.numeric(traitarray),resources=as.numeric(apply(resources,2,unique)),beta2=castdf$gamma2,beta3=gamma3)\n\norig<-trajF(alpha=rnorm(2000,intercept,sigma_intercept),beta1=rnorm(2000,gamma1,sigma_slope1),beta2=rnorm(2000,gamma2,sigma_slope2),beta3=rnorm(2000,gamma3,sigma_slope3),x=as.numeric(traitarray),resources=as.numeric(apply(resources,2,unique)))\n\n#plot and compare to original data\nggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill=\"red\")  + geom_line(aes(y=mean),size=.8,col=\"red\",linetype=\"dashed\") + theme_bw() + ylab(\"Interactions\") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab(\"Difference between Bill and Corolla Length\") \n```\n\nThe true data is plotted overtop the simulation relationship in black, and the predicted relationship in dashed red with pink CI intervals.\n\n## Trait by Resource Interaction\n\n```{r}\npredyint<-intF(alpha=castdf$intercept,beta1=castdf$gamma1,x=as.numeric(traitarray),resources=resources,beta2=castdf$gamma2,beta3=gamma3)\n\norigint<-intF(alpha=rnorm(2000,intercept,sigma_intercept),beta1=rnorm(2000,gamma1,sigma_slope1),beta2=rnorm(2000,gamma2,sigma_slope2),beta3=rnorm(2000,gamma3,sigma_slope3),x=as.numeric(traitarray),resources=resources)\n\n#plot and compare to original data\npsim4<-ggplot(data=predyint,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill=\"red\") + theme_bw() + ylab(\"Interactions\") + geom_line(data=origint,aes(x=x,y=mean),col='black',size=1) + geom_line(aes(y=mean),size=.8,col=\"red\",linetype=\"dashed\") + xlab(\"Difference between Bill and Corolla Length\") \n\npsim4\n```\n\n```{r}\nsave.image(\"Simulation_2M.RData\")\n```\n",
    "created" : 1460986776721.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1653289256",
    "id" : "3DC7B4EA",
    "lastKnownWriteTime" : 1460987958,
    "path" : "~/NetworkPredict/TwoDetectSimulation.Rmd",
    "project_path" : "TwoDetectSimulation.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}