#fit regression
lambda<-exp(alpha + beta1 * traitarray + beta2 * resources + beta3 * resources * traitarray)
true_interactions<-array(data=sapply(lambda,function(x){rpois(1,x)}),dim=c(h_species,plant_species,months))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
##Simulate Interactions
h_species=3
plant_species=10
months=24
phenology=1
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill)/10)
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
resources[,,x]<-rlnorm(1,4)
}
#standardize predictors
resources<-array(data=scale(resources),dim=c(h_species,plant_species,months))
#traitarray<-array(data=scale(traitarray),dim=c(h_species,plant_species,months))
#regression slope for trait-matching and resources
#trait match
gamma1=1
intercept<-.5
sigma_slope1<- 0.1
sigma_intercept<- 0.1
#resources
gamma2=0
sigma_slope2<- 0.1
#resources * traitmatch
gamma3=0.5
sigma_slope3<- 0.1
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,gamma1,sigma_slope1)
beta2<-rnorm(h_species,gamma2,sigma_slope2)
beta3<-rnorm(h_species,gamma3,sigma_slope3)
alpha<-rnorm(h_species,intercept,sigma_intercept)
#fit regression
lambda<-exp(alpha + beta1 * traitarray + beta2 * resources + beta3 * resources * traitarray)
true_interactions<-array(data=sapply(lambda,function(x){rpois(1,x)}),dim=c(h_species,plant_species,months))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
##Simulate Interactions
h_species=3
plant_species=10
months=24
phenology=1
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill)/10)
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
resources[,,x]<-rlnorm(1,4)
}
#standardize predictors
resources<-array(data=scale(resources),dim=c(h_species,plant_species,months))
#traitarray<-array(data=scale(traitarray),dim=c(h_species,plant_species,months))
#regression slope for trait-matching and resources
#trait match
gamma1=0.5
intercept<-.5
sigma_slope1<- 0.1
sigma_intercept<- 0.1
#resources
gamma2=0
sigma_slope2<- 0.1
#resources * traitmatch
gamma3=0.5
sigma_slope3<- 0.1
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,gamma1,sigma_slope1)
beta2<-rnorm(h_species,gamma2,sigma_slope2)
beta3<-rnorm(h_species,gamma3,sigma_slope3)
alpha<-rnorm(h_species,intercept,sigma_intercept)
#fit regression
lambda<-exp(alpha + beta1 * traitarray + beta2 * resources + beta3 * resources * traitarray)
true_interactions<-array(data=sapply(lambda,function(x){rpois(1,x)}),dim=c(h_species,plant_species,months))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
##Simulate Interactions
h_species=3
plant_species=10
months=24
phenology=1
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill)/10)
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
resources[,,x]<-rlnorm(1,4)
}
#standardize predictors
resources<-array(data=scale(resources),dim=c(h_species,plant_species,months))
#traitarray<-array(data=scale(traitarray),dim=c(h_species,plant_species,months))
#regression slope for trait-matching and resources
#trait match
gamma1=0.5
intercept<-.5
sigma_slope1<- 0.1
sigma_intercept<- 0.1
#resources
gamma2=0
sigma_slope2<- 0.1
#resources * traitmatch
gamma3=0.5
sigma_slope3<- 0.1
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,gamma1,sigma_slope1)
beta2<-rnorm(h_species,gamma2,sigma_slope2)
beta3<-rnorm(h_species,gamma3,sigma_slope3)
alpha<-rnorm(h_species,intercept,sigma_intercept)
#fit regression
lambda<-exp(alpha + beta1 * traitarray + beta2 * resources + beta3 * resources * traitarray)
true_interactions<-array(data=sapply(lambda,function(x){rpois(1,x)}),dim=c(h_species,plant_species,months))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
##Simulate Interactions
h_species=3
plant_species=10
months=24
phenology=1
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill)/10)
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,months))
#fill for each month
for (x in 1:months){
resources[,,x]<-rlnorm(1,4)
}
#standardize predictors
resources<-array(data=scale(resources),dim=c(h_species,plant_species,months))
#traitarray<-array(data=scale(traitarray),dim=c(h_species,plant_species,months))
#regression slope for trait-matching and resources
#trait match
gamma1=0.5
intercept<-.5
sigma_slope1<- 0.1
sigma_intercept<- 0.1
#resources
gamma2=0
sigma_slope2<- 0.1
#resources * traitmatch
gamma3=0.5
sigma_slope3<- 0.1
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,gamma1,sigma_slope1)
beta2<-rnorm(h_species,gamma2,sigma_slope2)
beta3<-rnorm(h_species,gamma3,sigma_slope3)
alpha<-rnorm(h_species,intercept,sigma_intercept)
#fit regression
lambda<-exp(alpha + beta1 * traitarray + beta2 * resources + beta3 * resources * traitarray)
true_interactions<-array(data=sapply(lambda,function(x){rpois(1,x)}),dim=c(h_species,plant_species,months))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
ggplot(mdat,aes(col=resources,y=y,x=traitmatch)) + geom_point() + geom_smooth(aes(group=1),method="glm",method.args = list(family = "poisson"),formula=y~x) + theme_bw() + labs(x="Bill-Corolla Difference",y="Visits","Hummingbird") + ggtitle("Correlation in Simulated Data") + labs(col="Available Resources") + scale_color_continuous(low="blue",high="red")
tempfile()
a<-tempfile()
sink(a)
print("Hello World")
sink()
cat_a<-read.table(a)
print(cat_a)
a<-tempfile()
b<-1:10
sink(a)
print("Hello World")
b
sink()
cat_a<-read.table(a)
print(cat_a)
a<-tempfile()
b<-1:10
sink(a)
print("Hello World")
b
sink()
cat_a<-readLines(a)
print(cat_a)
a<-tempfile()
b<-1:10
sink(a)
print("Hello World")
b
warning("I'm a warning")
sink()
cat_a<-readLines(a)
print(cat_a)
a<-tempfile()
b<-1:10
sink(a,warning=T)
print("Hello World")
b
warning("I'm a warning")
sink()
cat_a<-readLines(a)
print(cat_a)
library(lme4)
library(lme)
install.packages("lme4")
head(iris)
lm(iris,Sepal.Width~Sepal.Length)
lm(data=iris,Sepal.Width~Sepal.Length)
qplot(iris$Sepal.Width,iris$Sepal.Length)
library(ggplot2)
qplot(iris$Sepal.Width,iris$Sepal.Length)
lm(data=iris,Sepal.Width~Sepal.Length)
head(iris)
qplot(iris$Sepal.Width,iris$Sepal.Length,col=iris$Species)
lm2<-lmer(data=iris,Sepal.Width~Sepal.Length + (1|Species))
library(lme4)
lm2<-lmer(data=iris,Sepal.Width~Sepal.Length + (1|Species))
lm<-lm(data=iris,Sepal.Width~Sepal.Length)
lm
lm2
hist(rpois(10000,10))
hist(rlnorm(10000,10))
hist(rlnorm(10000,4))
hist(rlnorm(10000,1))
hist(rlnorm(10000,10))
hist(rlnorm(10000,1))
hist(rpois(10000,10))
mean(rpois(10000,10))
mean(rlnorm(10000,1))
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
library(boot)
?rbinom
rbinom(1,1,0.2)
initY<-array(dim=c(Birds,Plants,Times),data=1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mdatm,aes(x=traitmatch,y=value,col=variable)) + geom_point(alpha=.5) + geom_smooth(method="glm",method.args(list(family="poisson")),linetype="dashed",size=1.1) + ggtitle("Correlation in Simulated Data") + labs(x="Difference in Bill and Corolla Length",y="Number of Interactions",col="Observation Process") + theme_bw()
library(ggplot2)
?geom_smooth
ggplot(mdatm,aes(x=traitmatch,y=value,col=variable)) + geom_point(alpha=.5) + geom_smooth(method="glm",method.args=list(family="poisson"),linetype="dashed",size=1.1) + ggtitle("Correlation in Simulated Data") + labs(x="Difference in Bill and Corolla Length",y="Number of Interactions",col="Observation Process") + theme_bw()
ggplot(mdatm,aes(x=traitmatch,y=value,col=variable)) + geom_point(alpha=.5) + geom_smooth(method="glm",method.args=list(family="binomial"),linetype="dashed",size=1.1) + ggtitle("Correlation in Simulated Data") + labs(x="Difference in Bill and Corolla Length",y="Number of Interactions",col="Observation Process") + theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dim(resources)
Times
plant_species
resources
dim(resources)
resources<-array(NA,dim=c(h_species,plant_species,Times))
dim(resources)
for (x in 1:Times){
resources[,,x]<-rbinom(1,1,0.5)
}
dim(resources)
resources<-array(data=scale(resources),dim=c(h_species,plant_species,Times))
dim(resources)
TimeResources
dim(TimeResources)
TimeResources<-mdat %>% group_by(Time,Plant) %>% summarize(v=unique(resources)) %>% acast(Plant~Time,value.var="v")
source('~/.active-rstudio-document', echo=TRUE)
dim(resources)
dim(TimeResources)
resources
TimeResources
source('~/.active-rstudio-document', echo=TRUE)
resources[10,21]
TimeResources<-mdat %>% group_by(Time,Plant) %>% summarize(v=unique(resources)) %>% acast(Plant~Time,value.var="v",fill=0)
source('~/.active-rstudio-document', echo=TRUE)
dim(dcam)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
warnings()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
predy<-trajF(alpha=castdf$intercept,beta1=castdf$gamma1,x=as.numeric(traitarray),resources=as.numeric(resources),beta2=castdf$gamma2)
orig<-trajF(alpha=rnorm(2000,intercept,sigma_intercept),beta1=rnorm(2000,gamma1,sigma_slope1),beta2=rnorm(2000,gamma2,sigma_slope2),x=as.numeric(traitarray),resources=as.numeric(apply(resources,2,unique)))
orig<-trajF(alpha=rnorm(2000,intercept,sigma_intercept),beta1=rnorm(2000,gamma1,sigma_slope1),beta2=rnorm(2000,gamma2,sigma_slope2),x=as.numeric(traitarray),resources=as.numeric(resources))
#plot and compare to original data
ggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill="red")  + geom_line(aes(y=mean),size=.8,col="red",linetype="dashed") + theme_bw() + ylab("Interactions") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab("Difference between Bill and Corolla Length")
head(predy)
head(castdf)
spdf<-dcast(pars[pars$par %in% c("alpha1","beta1","beta2"),], Chain + Draw~par,value.var="estimate")
head(pars)
spdf<-dcast(pars[pars$par %in% c("alpha1","beta1","beta2"),], Chain + Species+  Draw~par,value.var="estimate")
spdf<-dcast(pars[pars$par %in% c("alpha1","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
head(spdf)
x=1
filter(spdf,species==x)
filter(spdf,species==x)
spdat<-filter(spdf,species==x)
spy<-trajF(alpha=castdf$intercept,beta1=castdf$gamma1,x=as.numeric(traitarray),resources=as.numeric(resources),beta2=castdf$gamma2)
spy
traitarray
traitarray[[1]]
traitarray[1[]
traitarray[1]
traitmatch
head(spdat)
haed(spy)
head(spy)
traitmatch[x,y]
y=1
spy %>% filter(x==traitmatch[x,y])
traitmatch[x,y]
spy %>% filter(x %in% traitmatch[x,y])
sample(1:nrow(spdat))
sample(1:nrow(spdat),1)
spdat[sample(1:nrow(spdat),1),]
prob=inv.logit(draw$alpha + draw$beta1 * x)
draw<-spdat[sample(1:nrow(spdat),1),]
prob=inv.logit(draw$alpha + draw$beta1 * x)
prob
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
prob
traitmatch[x,y]
draw$beta1
draw$alpha
head(draw)
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
prob
rbinim(1,1,prob)
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
rbinom(1,1,prob)
}
}
}
rbinom(1,1,prob)
data.frame(Bird=x,Plant=y,State=state)
networkstate<-rbind_all(networkstate)
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-list()
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
state<-rbinom(1,1,prob)
networkstate[[x]]<-data.frame(Bird=x,Plant=y,State=state)
}
}
networkstate<-rbind_all(networkstate)
head(networkstate)
plotweb(networkstate)
plotweb
?plotweb
library(plotweb)
library(bipartite)
plotweb(networkstate)
table(networkstate)
netmat,<-acast(networkstate,Bird~Plant)
plotweb(netmat)
netmat<-acast(networkstate,Bird~Plant)
plotweb(netmat)
netmat
netmat<-acast(networkstate,Bird~Plant)
netmat
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-list()
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
state<-rbinom(1,1,prob)
networkstate[[x]][[y]]<-data.frame(Bird=x,Plant=y,State=state)
}
}
networkstate<-rbind_all(networkstate)
netmat<-acast(networkstate,Bird~Plant)
plotweb(netmat)
networkstate
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-matrix(nrow=h_species,ncol=plant_species)
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
state<-rbinom(1,1,prob)
networkstate[x,y]<-data.frame(Bird=x,Plant=y,State=state)
}
}
networkstate<-rbind_all(networkstate)
netmat<-acast(networkstate,Bird~Plant)
plotweb(netmat)
networkstate
spdat
draw
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
prob
rbinom(1,1,prob)
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-matrix(nrow=h_species,ncol=plant_species)
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
networkstate[x,y]<-rbinom(1,1,prob)
}
}
networkstate<-rbind_all(networkstate)
netmat<-acast(networkstate,Bird~Plant)
plotweb(netmat)
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-matrix(nrow=h_species,ncol=plant_species)
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta1 * traitmatch[x,y])
networkstate[x,y]<-rbinom(1,1,prob)
}
}
plotweb(networkstate)
networkstate
spdf<-dcast(pars[pars$par %in% c("alpha","beta1","beta2"),], Chain + species+  Draw~par,value.var="estimate")
networkstate<-matrix(nrow=h_species,ncol=plant_species)
for( x in 1:h_species){
spdat<-filter(spdf,species==x)
draw<-spdat[sample(1:nrow(spdat),1),]
#For each plant species create a deviate
for (y in 1:plant_species){
prob=inv.logit(draw$alpha + draw$beta2 * resources[y,1])
networkstate[x,y]<-rbinom(1,1,prob)
}
}
plotweb(networkstate)
colnames(trait_model)
trait_model<-matrix(nrow=h_species,ncol=plant_species)
colnames(trait_model)
names(trait_model)
trait_model
colname(trait_model)
colnames(trait_model)
source('~/.active-rstudio-document', echo=TRUE)
plotweb(abundance_model)
library(igraph)
plotweb(abundance_model)
source('~/.active-rstudio-document', echo=TRUE)
?bipartite
source('~/.active-rstudio-document', echo=TRUE)
