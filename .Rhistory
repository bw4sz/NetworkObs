#trait match
beta1_mu=-0.5
beta1_sigma<- 0.05
#resources
beta2_mu=0
beta2_sigma<- 0.05
#loop through each species and plants
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,beta1_mu,beta1_sigma)
beta2<-rnorm(h_species,beta2_mu, beta2_sigma)
alpha<-rnorm(h_species,alpha_mu,alpha_sigma)
phi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)
#How many cameras for each flower during each time period?
true_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
colnames(mdat)<-c("Bird","Plant","Time","resources","traitmatch","True_state")
head(mdat)
dim(mdat)
table(mdat$Bird,mdat$Plant,mdat$Time)
max(table(mdat$Bird,mdat$Plant,mdat$Time))
head9Mdat
head(mdat)
sdat<-split(mdat,mdat$Time)
x<-sdat[[1]]
head(x)
x=1
sdat[[1]]
sdat[[x]]
sdat[[x]][y,]
x=1
y=1
sdat[[x]][y,]
sdat[[x]][y,]
rbinom(3,    sdat[[x]][y,"True_state"],prob=detection_trans))
rbinom(3,sdat[[x]][y,"True_state"],prob=detection_trans))
rbinom(3,sdat[[x]][y,"True_state"],prob=detection_trans)
}
detection_trans
rbinom(3,sdat[[x]][y,"True_state"],prob=detection_trans)
Y_Transect=rbinom(3,sdat[[x]][y,"True_state"],prob=detection_trans)
Y_Transect
data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
timedat<-sdat[[x]][y,]
data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
}
Y_Transect
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
out<-data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
mdat[x,]
s
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
dat[[x]]<-data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
}
}
dat<-rbind_all(dat)
##Observation models
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
dat[[x]]<-data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
}
}
dat<-rbind_all(dat)
data.frame(Bird=timedat$Bird,timedat$Plant,timedat$Time,Y_Transect)
data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
rbind(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect))
rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)))
out<-data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)))
h_species=5
plant_species=6
Times=24
detection_cam=0.25
detection_trans=0.6
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill))
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
resources[,,x]<-rpois(1,10)
}
#standardize predictors
#resources<-array(data=scale(resources,center=TRUE,scale=TRUE),dim=c(h_species,plant_species,Times))
#regression slope for trait-matching and resources
#Intercept
alpha_mu<-2
alpha_sigma<- 0.05
#trait match
beta1_mu=-0.5
beta1_sigma<- 0.05
#resources
beta2_mu=0
beta2_sigma<- 0.05
#loop through each species and plants
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,beta1_mu,beta1_sigma)
beta2<-rnorm(h_species,beta2_mu, beta2_sigma)
alpha<-rnorm(h_species,alpha_mu,alpha_sigma)
phi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)
#How many cameras for each flower during each time period?
true_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
colnames(mdat)<-c("Bird","Plant","Time","resources","traitmatch","True_state")
##Observation models
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
#Transects
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
out<-data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
#Cameras
cams<-rpois(1,0.4)
if(!cam==0){
Y_Camera=rbinom(cams,mdat$True_state[x],prob=detection_cam)
out<-rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Camera)))
}
dat[[x]]<-out
}
dat<-rbind_all(dat)
h_species=5
plant_species=6
Times=24
detection_cam=0.25
detection_trans=0.6
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill))
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
resources[,,x]<-rpois(1,10)
}
#standardize predictors
#resources<-array(data=scale(resources,center=TRUE,scale=TRUE),dim=c(h_species,plant_species,Times))
#regression slope for trait-matching and resources
#Intercept
alpha_mu<-2
alpha_sigma<- 0.05
#trait match
beta1_mu=-0.5
beta1_sigma<- 0.05
#resources
beta2_mu=0
beta2_sigma<- 0.05
#loop through each species and plants
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,beta1_mu,beta1_sigma)
beta2<-rnorm(h_species,beta2_mu, beta2_sigma)
alpha<-rnorm(h_species,alpha_mu,alpha_sigma)
phi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)
#How many cameras for each flower during each time period?
true_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
colnames(mdat)<-c("Bird","Plant","Time","resources","traitmatch","True_state")
##Observation models
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
#Transects
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
out<-data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
#Cameras
cams<-rpois(1,0.4)
if(!cams==0){
Y_Camera=rbinom(cams,mdat$True_state[x],prob=detection_cam)
out<-rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Camera)))
}
dat[[x]]<-out
}
dat<-rbind_all(dat)
head(dat)
dat$Y_Camera
head(dat)
dim(mdat)
dim(odat)
odat<-rbind_all(dat)
h_species=5
plant_species=6
Times=24
detection_cam=0.25
detection_trans=0.6
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill))
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
resources[,,x]<-rpois(1,10)
}
#standardize predictors
#resources<-array(data=scale(resources,center=TRUE,scale=TRUE),dim=c(h_species,plant_species,Times))
#regression slope for trait-matching and resources
#Intercept
alpha_mu<-2
alpha_sigma<- 0.05
#trait match
beta1_mu=-0.5
beta1_sigma<- 0.05
#resources
beta2_mu=0
beta2_sigma<- 0.05
#loop through each species and plants
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,beta1_mu,beta1_sigma)
beta2<-rnorm(h_species,beta2_mu, beta2_sigma)
alpha<-rnorm(h_species,alpha_mu,alpha_sigma)
phi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)
#How many cameras for each flower during each time period?
true_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
colnames(mdat)<-c("Bird","Plant","Time","resources","traitmatch","True_state")
##Observation models
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
#Transects
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
out<-data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
#Cameras
cams<-rpois(1,0.4)
if(!cams==0){
Y_Camera=rbinom(cams,mdat$True_state[x],prob=detection_cam)
out<-rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Camera)))
}
dat[[x]]<-out
}
odat<-rbind_all(dat)
mdat<-merge(mdat,odat,by=c("Bird","Plant","Time"))
head(mdat)
mdat
head(mdat)
mdat <- mdat %>% arrange(Bird,Plant,Time)
headmdat
head(mdat)
mdat[mdat$True_state==1,]
h_species=5
plant_species=6
Times=24
detection_cam=0.25
detection_trans=0.6
#Bill sizes
Bill<-rpois(h_species,10)
#Corolla sizes
Corolla<-rpois(plant_species,15)
#Subtract both and take absolute value
traitmatch<-abs(sapply(Corolla,function(x) x - Bill))
#fill out for each month
traitarray<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
traitarray[,,x]<-traitmatch
}
#simulate some poisson distributed resource counts for each replicate
#this will be same for each species to start with.
resources<-array(NA,dim=c(h_species,plant_species,Times))
#fill for each month
for (x in 1:Times){
resources[,,x]<-rpois(1,10)
}
#standardize predictors
#resources<-array(data=scale(resources,center=TRUE,scale=TRUE),dim=c(h_species,plant_species,Times))
#regression slope for trait-matching and resources
#Intercept
alpha_mu<-2
alpha_sigma<- 0.05
#trait match
beta1_mu=-0.5
beta1_sigma<- 0.05
#resources
beta2_mu=0
beta2_sigma<- 0.05
#loop through each species and plants
#draw values from hierarcichal distributions
beta1<-rnorm(h_species,beta1_mu,beta1_sigma)
beta2<-rnorm(h_species,beta2_mu, beta2_sigma)
alpha<-rnorm(h_species,alpha_mu,alpha_sigma)
phi<-inv.logit(alpha + beta1 * traitarray + beta2 * resources)
#How many cameras for each flower during each time period?
true_interactions<-array(data=sapply(phi,function(x){rbinom(1,1,prob=x)}),dim=c(h_species,plant_species,Times))
#combine and melt into a single datafFrame
mdat<-dcast(melt(list(y=true_interactions,traitmatch=traitarray,resources=resources)),Var1+Var2+Var3~L1)
colnames(mdat)<-c("Bird","Plant","Time","resources","traitmatch","True_state")
##Observation models
dat<-list()
for (x in 1:nrow(mdat)){
#for each bird plant combo in that time period
timedat<-mdat[x,]
#Transects
Y_Transect=rbinom(3,timedat$True_state,prob=detection_trans)
out<-data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Transect)
#Cameras
cams<-rpois(1,1)
if(!cams==0){
Y_Camera=rbinom(cams,mdat$True_state[x],prob=detection_cam)
out<-rbind_all(list(out,data.frame(Bird=timedat$Bird,Plant=timedat$Plant,Time=timedat$Time,Y_Camera)))
}
dat[[x]]<-out
}
odat<-rbind_all(dat)
mdat<-merge(mdat,odat,by=c("Bird","Plant","Time"))
mdat <- mdat %>% arrange(Bird,Plant,Time)
head(mdat)
head(mdat,10)
head(mdat,15)
head(mdat,20)
head(mdat,222)
head(mdat,22)
dim(mdat)
mdatm<-melt(mdat,measure.vars = c("True_state","Y_Camera","Y_Transect"))
head(mdatm)
ggplot(mdatm,aes(x=traitmatch,y=value,col=variable)) + geom_point(alpha=.5) + geom_smooth(method="glm",method.args=list(family="binomial"),linetype="dashed",size=1.1) + ggtitle("Correlation in Simulated Data") + labs(x="Difference in Bill and Corolla Length (mm)",y="Probability of Interactions",col="Observation Process") + theme_bw()
Traitmatch<-mdat %>% group_by(Bird,Plant) %>% summarize(v=unique(traitmatch)) %>% acast(Bird~Plant,value.var="v")
TimeResources<-mdat %>% group_by(Bird,Time,Plant) %>% summarize(v=unique(resources)) %>% acast(Bird~Plant~Time,value.var="v",fill=0)
dim(mdat)
head(mdat)
head(mdatm)
mdat$Y_Transect+mdat$Y_Camera
mdat$Survey_Type<-NA
mdat$Survey_Type<-is.na(mdat$Y_Transect)
Survey_Type
mdat$Survey_Type
levels(mdat$Survey_Type)
mdat$Survey_Type<-as.factor(mdat$Survey_Type)
levels(mdat$Survey_Type)
levels(mdat$Survey_Type)<-c("Transect","Camera")
paralleljags<-T
if(paralleljags){
#Source model
source("Bayesian/NmixturePoissonRagged2m.R")
#print model
writeLines(readLines("Bayesian/NmixturePoissonRagged2m.R"))
#Input Data
Dat <- c('Yobs_camera','Yobs_transect','Birds','Bird','Plant','Time','Plants','Times','resources','Nobs','cam_surveys','trans_surveys','Traitmatch')
#Inits
InitStage <- function(){
#A blank Y matrix - all present
initY<-array(dim=c(Birds,Plants,Times),data=1)
list(S=initY)}
#Parameters to track
ParsStage <- c("alpha","beta1","beta2","alpha_mu","alpha_sigma","beta1_mu","beta1_sigma","beta2_mu","beta2_sigma","dtrans","dcam")
#MCMC options
ni <- 100  # number of draws from the posterior
nt <- max(c(1,ni*.00001))  #thinning rate
nb <- ni*.92 # number to discard for burn-in
nc <- 2  # number of chains
#Jags
Yobs_camera = mdat$Y_Camera
Yobs_transect = mdat$Y_Transect
Birds=max(mdat$Bird)
Bird=mdat$Bird
Plant=mdat$Plant
Time=mdat$Time
Plants=max(mdat$Plant)
Times=max(mdat$Time)
resources=TimeResources
Nobs=nrow(mdat)
cam_surveys=(mdat$Survey_Type=="Camera")*1
trans_surveys=(mdat$Survey_Type=="Transect")*1
Traitmatch=Traitmatch
m<-do.call(jags.parallel,list(Dat,InitStage,ParsStage,model.file="Bayesian/NmixturePoissonRagged2m.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))
} else {
#Source model
source("Bayesian/NmixturePoissonRagged2m.R")
#print model
writeLines(readLines("Bayesian/NmixturePoissonRagged2m.R"))
#Input Data
Dat <- list(
Yobs_camera = mdat$Y_Camera,
Yobs_transect = mdat$Y_Transect,
Birds=max(mdat$Bird),
Bird=mdat$Bird,
Plant=mdat$Plant,
Time=mdat$Time,
Plants=max(mdat$Plant),
Times=max(mdat$Time),
resources=TimeResources,
Nobs=nrow(mdat),
cam_surveys=(mdat$Y_Camera>0)*1,
trans_surveys=(mdat$Y_Transect>0)*1,
Traitmatch=Traitmatch)
#A blank Y matrix - all present
initY<-array(dim=c(Dat$Birds,Dat$Plants,Dat$Times),data=max(mdat$Y_Transect,na.rm=T))
initB<-as.numeric(matrix(nrow=h_species,ncol=1,data=.1))
#Inits
InitStage <- function(){list(S=initY)}
#Parameters to track
ParsStage <- c("alpha","beta1","beta2","intercept","sigma_alpha","sigma_slope1","sigma_slope2","gamma1","gamma2","dtrans","dcam")
#MCMC options
ni <- 20000  # number of draws from the posterior
nt <- max(c(1,ni*.0001))  #thinning rate
nb <- ni*.90 # number to discard for burn-in
nc <- 2  # number of chains
#Jags
m = jags(inits=InitStage,
n.chains=nc,
model.file="Bayesian/NmixturePoissonRagged2m.jags",
working.directory=getwd(),
data=Dat,
parameters.to.save=ParsStage,
n.thin=nt,
n.iter=ni,
n.burnin=nb,
DIC=T)
}
pars<-extract_par(m)
system.time(m<-do.call(jags.parallel,list(Dat,InitStage,ParsStage,model.file="Bayesian/NmixturePoissonRagged2m.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc)))
pars<-extract_par(m)
ggplot(pars[pars$par %in% c("alpha","beta1","beta2"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + facet_grid(par~species,scale="free") + theme_bw() + labs(col="Chain") + ggtitle("Species Level Probability")
ggplot(pars[pars$par %in% c("dcam","dtrans"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + facet_grid(~par,scale="free") + theme_bw() + labs(col="Chain") + ggtitle("Detection Probability")
ggplot(pars[pars$par %in% c("alpha_mu","alpha_sigma","beta1_mu","beta1_sigma","beta2_mu","beta2_sigma"),],aes(x=Draw,y=estimate,col=as.factor(Chain))) + geom_line() + theme_bw() + labs(col="Chain") + ggtitle("Group Level Regression") + facet_wrap(~par,scales="free")
p<-ggplot(pars[pars$par %in% c("alpha","beta1","beta2"),],aes(x=estimate)) + geom_histogram() + ggtitle("Estimate of parameters") + facet_grid(species~par,scales="free") + theme_bw() + ggtitle("Species Posteriors")
#Add true values
tr<-melt(data.frame(species=1:h_species,alpha=alpha,beta1=beta1,beta2=beta2),id.var='species')
colnames(tr)<-c("species","par","value")
psim<-p + geom_vline(data=tr,aes(xintercept=value),col='red',linetype='dashed',size=1)
p<-ggplot(pars[pars$par %in% c("beta1_mu","beta2_mu","alpha_mu","alpha_sigma","beta1_sigma","beta2_sigma","dcam","dtrans"),],aes(x=estimate)) + geom_histogram() + ggtitle("Hierarchical Posteriors") + facet_wrap(~par,scale="free",nrow=2) + theme_bw()
tr<-melt(list(beta1_mu=beta1_mu,beta2_mu=beta2_mu,alpha_mu=alpha_mu,alpha_sigma=alpha_sigma,beta1_sigma=beta1_sigma,beta2_sigma=beta2_sigma,dtrans=detection_trans,dcam=detection_cam))
colnames(tr)<-c("value","par")
psim2<-p + geom_vline(data=tr,aes(xintercept=value),linetype='dashed',size=1,col="red")
suppressMessages(grid.arrange(psim,psim2,heights=c(.65,.45)))
castdf<-dcast(pars[pars$par %in% c("beta1_mu","beta2_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
castdf<-dcast(pars[pars$par %in% c("beta1_mu","beta2_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
trajF<-function(alpha,beta1,beta2,x,resources){
indat<-data.frame(alpha,beta1,beta2)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
#Compute CI intervals
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
}
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=as.numeric(traitarray),resources=as.numeric(resources),beta2=castdf$beta2_mu)
orig<-trajF(alpha=rnorm(2000,alpha_mu,alpha_sigma),beta1=rnorm(2000,beta1_mu,beta1_sigma),beta2=rnorm(2000,beta2_mu,beta2_sigma),x=as.numeric(traitarray),resources=as.numeric(resources))
#plot and compare to original data
ggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill="red")  + geom_line(aes(y=mean),size=.8,col="red",linetype="dashed") + theme_bw() + ylab("Probability of interactions") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab("Difference between Bill and Corolla Length") + geom_line(data=orig,aes(x=x,y=upper),col='grey50',linetype='dashed',size=0.5) + geom_line(data=orig,aes(x=x,y=lower),col='grey50',linetype='dashed',size=0.5)
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=as.numeric(traitarray),resources=as.numeric(resources),beta2=castdf$beta2_mu)
orig<-trajF(alpha=rnorm(2000,alpha_mu,alpha_sigma),beta1=rnorm(2000,beta1_mu,beta1_sigma),beta2=rnorm(2000,beta2_mu,beta2_sigma),x=as.numeric(traitarray),resources=as.numeric(resources))
#plot and compare to original data
ggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill="red")  + geom_line(aes(y=mean),size=.8,col="red",linetype="dashed") + theme_bw() + ylab("Probability of interactions") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab("Difference between Bill and Corolla Length") + geom_line(data=orig,aes(x=x,y=upper),col='grey50',linetype='dashed',size=0.5) + geom_line(data=orig,aes(x=x,y=lower),col='grey50',linetype='dashed',size=0.5)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill="red")  + geom_line(aes(y=mean),size=.8,col="red",linetype="dashed") + theme_bw() + ylab("Probability of interactions") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab("Difference between Bill and Corolla Length") + geom_line(data=orig,aes(x=x,y=upper),col='grey50',linetype='dashed',size=0.5) + geom_line(data=orig,aes(x=x,y=lower),col='grey50',linetype='dashed',size=0.5)
hist(castdf$alpha_mu)
hist(alpha_mu)
alpha_mu
alpha_sigma
ggplot(data=predy,aes(x=x)) + geom_point(data=mdat,aes(x=traitmatch,y=True_state),alpha=.5,size=.5)+ geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.3,fill="red")  + geom_line(aes(y=mean),size=.8,col="red",linetype="dashed") + theme_bw() + ylab("Probability of interactions") + geom_line(data=orig,aes(x=x,y=mean),col='black',size=1)+ xlab("Difference between Bill and Corolla Length") + geom_line(data=orig,aes(x=x,y=upper),col='grey50',linetype='dashed',size=0.5) + geom_line(data=orig,aes(x=x,y=lower),col='grey50',linetype='dashed',size=0.5)
castdf$alpha_mu
hist(castdf$alpha_mu)
alpha_mu
alpha
alpha
alpha
1/0.05^2
sqrt(1/400)
psim
psim2
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
